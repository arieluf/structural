// Ejemplo proyecto 3D
n = [
  [0    ,  0     ,  0  ] ,
  [5.7  ,  0     ,  0  ] ,
  [11.4 ,  0     ,  0  ] ,
  [17.2 ,  0     ,  0  ] ,
  [23.6 ,  0     ,  0  ] ,
  [0    ,  0     ,  5.8] ,
  [5.7  ,  0     ,  5.8] ,
  [11.4 ,  0     ,  5.8] ,
  [17.2 ,  0     ,  5.8] ,
  [23.6 ,  0     ,  5.8] ,
  [0    ,  0     , 11.6] ,
  [5.7  ,  0     , 11.6] ,
  [11.4 ,  0     , 11.6] ,
  [17.2 ,  0     , 11.6] ,
  [23.6 ,  0     , 11.6] ,
  [17.2 ,  0     , 17.6] ,
  [23.6 ,  0     , 17.6] ,
  [0    ,  3.625 ,  0  ] ,
  [5.7  ,  3.625 ,  0  ] ,
  [11.4 ,  3.625 ,  0  ] ,
  [17.2 ,  3.625 ,  0  ] ,
  [23.6 ,  3.625 ,  0  ] ,
  [0    ,  3.625 ,  5.8] ,
  [5.7  ,  3.625 ,  5.8] ,
  [11.4 ,  3.625 ,  5.8] ,
  [17.2 ,  3.625 ,  5.8] ,
  [23.6 ,  3.625 ,  5.8] ,
  [0    ,  3.625 , 11.6] ,
  [5.7  ,  3.625 , 11.6] ,
  [11.4 ,  3.625 , 11.6] ,
  [17.2 ,  3.625 , 11.6] ,
  [23.6 ,  3.625 , 11.6] ,
  [17.2 ,  3.625 , 17.6] ,
  [23.6 ,  3.625 , 17.6] ,
  [0    ,  7.135 ,  0  ] ,
  [5.7  ,  7.135 ,  0  ] ,
  [11.4 ,  7.135 ,  0  ] ,
  [17.2 ,  7.135 ,  0  ] ,
  [23.6 ,  7.135 ,  0  ] ,
  [0    ,  7.135 ,  5.8] ,
  [5.7  ,  7.135 ,  5.8] ,
  [11.4 ,  7.135 ,  5.8] ,
  [17.2 ,  7.135 ,  5.8] ,
  [23.6 ,  7.135 ,  5.8] ,
  [0    ,  7.135 , 11.6] ,
  [5.7  ,  7.135 , 11.6] ,
  [11.4 ,  7.135 , 11.6] ,
  [17.2 ,  7.135 , 11.6] ,
  [23.6 ,  7.135 , 11.6] ,
  [17.2 ,  7.135 , 17.6] ,
  [23.6 ,  7.135 , 17.6] ,
  [0    , 10.645 ,  0  ] ,
  [5.7  , 10.645 ,  0  ] ,
  [11.4 , 10.645 ,  0  ] ,
  [17.2 , 10.645 ,  0  ] ,
  [23.6 , 10.645 ,  0  ] ,
  [0    , 10.645 ,  5.8] ,
  [5.7  , 10.645 ,  5.8] ,
  [11.4 , 10.645 ,  5.8] ,
  [17.2 , 10.645 ,  5.8] ,
  [23.6 , 10.645 ,  5.8] ,
  [0    , 10.645 , 11.6] ,
  [5.7  , 10.645 , 11.6] ,
  [11.4 , 10.645 , 11.6] ,
  [17.2 , 10.645 , 11.6] ,
  [23.6 , 10.645 , 11.6] ,
  [17.2 , 10.645 , 17.6] ,
  [23.6 , 10.645 , 17.6] ,
  [0    , 14.155 ,  0  ] ,
  [5.7  , 14.155 ,  0  ] ,
  [11.4 , 14.155 ,  0  ] ,
  [17.2 , 14.155 ,  0  ] ,
  [23.6 , 14.155 ,  0  ] ,
  [0    , 14.155 ,  5.8] ,
  [5.7  , 14.155 ,  5.8] ,
  [11.4 , 14.155 ,  5.8] ,
  [17.2 , 14.155 ,  5.8] ,
  [23.6 , 14.155 ,  5.8] ,
  [0    , 14.155 , 11.6] ,
  [5.7  , 14.155 , 11.6] ,
  [11.4 , 14.155 , 11.6] ,
  [17.2 , 14.155 , 11.6] ,
  [23.6 , 14.155 , 11.6] ,
  [17.2 , 14.155 , 17.6] ,
  [23.6 , 14.155 , 17.6] ,
  [0    , 17.665 ,  0  ] ,
  [5.7  , 17.665 ,  0  ] ,
  [11.4 , 17.665 ,  0  ] ,
  [17.2 , 17.665 ,  0  ] ,
  [23.6 , 17.665 ,  0  ] ,
  [0    , 17.665 ,  5.8] ,
  [5.7  , 17.665 ,  5.8] ,
  [11.4 , 17.665 ,  5.8] ,
  [17.2 , 17.665 ,  5.8] ,
  [23.6 , 17.665 ,  5.8] ,
  [0    , 17.665 , 11.6] ,
  [5.7  , 17.665 , 11.6] ,
  [11.4 , 17.665 , 11.6] ,
  [17.2 , 17.665 , 11.6] ,
  [23.6 , 17.665 , 11.6] ,
  [17.2 , 17.665 , 17.6] ,
  [23.6 , 17.665 , 17.6] ,
  [0    , 21.175 ,  0  ] ,
  [5.7  , 21.175 ,  0  ] ,
  [11.4 , 21.175 ,  0  ] ,
  [17.2 , 21.175 ,  0  ] ,
  [0    , 21.175 ,  5.8] ,
  [5.7  , 21.175 ,  5.8] ,
  [11.4 , 21.175 ,  5.8] ,
  [17.2 , 21.175 ,  5.8] ,
  [0    , 21.175 , 11.6] ,
  [5.7  , 21.175 , 11.6] ,
  [11.4 , 21.175 , 11.6] ,
  [17.2 , 21.175 , 11.6] ,
];

// Draw nodes
for (var i = 0; i < n.length; i++) {
  node(n[i]);
}

// Columnas
elem( n[1 -1], n[18 -1] );
elem( n[2 -1], n[19 -1] );
elem( n[3 -1], n[20 -1] );
elem( n[4 -1], n[21 -1] );
elem( n[5 -1], n[22 -1] );
elem( n[6 -1], n[23 -1] );
elem( n[7 -1], n[24 -1] );
elem( n[8 -1], n[25 -1] );
elem( n[9 -1], n[26 -1] );
elem( n[10-1], n[27 -1] );
elem( n[11-1], n[28 -1] );
elem( n[12-1], n[29 -1] );
elem( n[13-1], n[30 -1] );
elem( n[14-1], n[31 -1] );
elem( n[15-1], n[32 -1] );
elem( n[16-1], n[33 -1] );
elem( n[17-1], n[34 -1] );
elem( n[18-1], n[35 -1] );
elem( n[19-1], n[36 -1] );
elem( n[20-1], n[37 -1] );
elem( n[21-1], n[38 -1] );
elem( n[22-1], n[39 -1] );
elem( n[23-1], n[40 -1] );
elem( n[24-1], n[41 -1] );
elem( n[25-1], n[42 -1] );
elem( n[26-1], n[43 -1] );
elem( n[27-1], n[44 -1] );
elem( n[28-1], n[45 -1] );
elem( n[29-1], n[46 -1] );
elem( n[30-1], n[47 -1] );
elem( n[31-1], n[48 -1] );
elem( n[32-1], n[49 -1] );
elem( n[33-1], n[50 -1] );
elem( n[34-1], n[51 -1] );
elem( n[35-1], n[52 -1] );
elem( n[36-1], n[53 -1] );
elem( n[37-1], n[54 -1] );
elem( n[38-1], n[55 -1] );
elem( n[39-1], n[56 -1] );
elem( n[40-1], n[57 -1] );
elem( n[41-1], n[58 -1] );
elem( n[42-1], n[59 -1] );
elem( n[43-1], n[60 -1] );
elem( n[44-1], n[61 -1] );
elem( n[45-1], n[62 -1] );
elem( n[46-1], n[63 -1] );
elem( n[47-1], n[64 -1] );
elem( n[48-1], n[65 -1] );
elem( n[49-1], n[66 -1] );
elem( n[50-1], n[67 -1] );
elem( n[51-1], n[68 -1] );
elem( n[52-1], n[69 -1] );
elem( n[53-1], n[70 -1] );
elem( n[54-1], n[71 -1] );
elem( n[55-1], n[72 -1] );
elem( n[56-1], n[73 -1] );
elem( n[57-1], n[74 -1] );
elem( n[58-1], n[75 -1] );
elem( n[59-1], n[76 -1] );
elem( n[60-1], n[77 -1] );
elem( n[61-1], n[78 -1] );
elem( n[62-1], n[79 -1] );
elem( n[63-1], n[80 -1] );
elem( n[64-1], n[81 -1] );
elem( n[65-1], n[82 -1] );
elem( n[66-1], n[83 -1] );
elem( n[67-1], n[84 -1] );
elem( n[68-1], n[85 -1] );
elem( n[69-1], n[86 -1] );
elem( n[70-1], n[87 -1] );
elem( n[71-1], n[88 -1] );
elem( n[72-1], n[89 -1] );
elem( n[73-1], n[90 -1] );
elem( n[74-1], n[91 -1] );
elem( n[75-1], n[92 -1] );
elem( n[76-1], n[93 -1] );
elem( n[77-1], n[94 -1] );
elem( n[78-1], n[95 -1] );
elem( n[79-1], n[96 -1] );
elem( n[80-1], n[97 -1] );
elem( n[81-1], n[98 -1] );
elem( n[82-1], n[99 -1] );
elem( n[83-1], n[100-1] );
elem( n[84-1], n[101-1] );
elem( n[85-1], n[102-1] );
elem( n[86-1], n[103-1] );
elem( n[87-1], n[104-1] );
elem( n[88-1], n[105-1] );
elem( n[89-1], n[106-1] );
elem( n[91-1], n[107-1] );
elem( n[92-1], n[108-1] );
elem( n[93-1], n[109-1] );
elem( n[94-1], n[110-1] );
elem( n[96-1], n[111-1] );
elem( n[97-1], n[112-1] );
elem( n[98-1], n[113-1] );
elem( n[99-1], n[114-1] );

// Vigas direccion x
elem( n[18 -1], n[ 19-1] );
elem( n[19 -1], n[ 20-1] );
elem( n[20 -1], n[ 21-1] );
elem( n[21 -1], n[ 22-1] );
elem( n[23 -1], n[ 24-1] );
elem( n[24 -1], n[ 25-1] );
elem( n[25 -1], n[ 26-1] );
elem( n[26 -1], n[ 27-1] );
elem( n[28 -1], n[ 29-1] );
elem( n[29 -1], n[ 30-1] );
elem( n[30 -1], n[ 31-1] );
elem( n[31 -1], n[ 32-1] );
elem( n[33 -1], n[ 34-1] );
elem( n[35 -1], n[ 36-1] );
elem( n[36 -1], n[ 37-1] );
elem( n[37 -1], n[ 38-1] );
elem( n[38 -1], n[ 39-1] );
elem( n[40 -1], n[ 41-1] );
elem( n[41 -1], n[ 42-1] );
elem( n[42 -1], n[ 43-1] );
elem( n[43 -1], n[ 44-1] );
elem( n[45 -1], n[ 46-1] );
elem( n[46 -1], n[ 47-1] );
elem( n[47 -1], n[ 48-1] );
elem( n[48 -1], n[ 49-1] );
elem( n[50 -1], n[ 51-1] );
elem( n[52 -1], n[ 53-1] );
elem( n[53 -1], n[ 54-1] );
elem( n[54 -1], n[ 55-1] );
elem( n[55 -1], n[ 56-1] );
elem( n[57 -1], n[ 58-1] );
elem( n[58 -1], n[ 59-1] );
elem( n[59 -1], n[ 60-1] );
elem( n[60 -1], n[ 61-1] );
elem( n[62 -1], n[ 63-1] );
elem( n[63 -1], n[ 64-1] );
elem( n[64 -1], n[ 65-1] );
elem( n[65 -1], n[ 66-1] );
elem( n[67 -1], n[ 68-1] );
elem( n[69 -1], n[ 70-1] );
elem( n[70 -1], n[ 71-1] );
elem( n[71 -1], n[ 72-1] );
elem( n[72 -1], n[ 73-1] );
elem( n[74 -1], n[ 75-1] );
elem( n[75 -1], n[ 76-1] );
elem( n[76 -1], n[ 77-1] );
elem( n[77 -1], n[ 78-1] );
elem( n[79 -1], n[ 80-1] );
elem( n[80 -1], n[ 81-1] );
elem( n[81 -1], n[ 82-1] );
elem( n[82 -1], n[ 83-1] );
elem( n[84 -1], n[ 85-1] );
elem( n[86 -1], n[ 87-1] );
elem( n[87 -1], n[ 88-1] );
elem( n[88 -1], n[ 89-1] );
elem( n[89 -1], n[ 90-1] );
elem( n[91 -1], n[ 92-1] );
elem( n[92 -1], n[ 93-1] );
elem( n[93 -1], n[ 94-1] );
elem( n[94 -1], n[ 95-1] );
elem( n[96 -1], n[ 97-1] );
elem( n[97 -1], n[ 98-1] );
elem( n[98 -1], n[ 99-1] );
elem( n[99 -1], n[100-1] );
elem( n[101-1], n[102-1] );
elem( n[103-1], n[104-1] );
elem( n[104-1], n[105-1] );
elem( n[105-1], n[106-1] );
elem( n[107-1], n[108-1] );
elem( n[108-1], n[109-1] );
elem( n[109-1], n[110-1] );
elem( n[111-1], n[112-1] );
elem( n[112-1], n[113-1] );
elem( n[113-1], n[114-1] );

// Vigas direccion y
elem( n[18 -1], n[ 23-1] );
elem( n[23 -1], n[ 28-1] );
elem( n[19 -1], n[ 24-1] );
elem( n[24 -1], n[ 29-1] );
elem( n[20 -1], n[ 25-1] );
elem( n[25 -1], n[ 30-1] );
elem( n[21 -1], n[ 26-1] );
elem( n[26 -1], n[ 31-1] );
elem( n[31 -1], n[ 33-1] );
elem( n[22 -1], n[ 27-1] );
elem( n[27 -1], n[ 32-1] );
elem( n[32 -1], n[ 34-1] );
elem( n[35 -1], n[ 40-1] );
elem( n[40 -1], n[ 45-1] );
elem( n[36 -1], n[ 41-1] );
elem( n[41 -1], n[ 46-1] );
elem( n[37 -1], n[ 42-1] );
elem( n[42 -1], n[ 47-1] );
elem( n[38 -1], n[ 43-1] );
elem( n[43 -1], n[ 48-1] );
elem( n[48 -1], n[ 50-1] );
elem( n[39 -1], n[ 44-1] );
elem( n[44 -1], n[ 49-1] );
elem( n[49 -1], n[ 51-1] );
elem( n[52 -1], n[ 57-1] );
elem( n[57 -1], n[ 62-1] );
elem( n[53 -1], n[ 58-1] );
elem( n[58 -1], n[ 63-1] );
elem( n[54 -1], n[ 59-1] );
elem( n[59 -1], n[ 64-1] );
elem( n[55 -1], n[ 60-1] );
elem( n[60 -1], n[ 65-1] );
elem( n[65 -1], n[ 67-1] );
elem( n[56 -1], n[ 61-1] );
elem( n[61 -1], n[ 66-1] );
elem( n[66 -1], n[ 68-1] );
elem( n[69 -1], n[ 74-1] );
elem( n[74 -1], n[ 79-1] );
elem( n[70 -1], n[ 75-1] );
elem( n[75 -1], n[ 80-1] );
elem( n[71 -1], n[ 76-1] );
elem( n[76 -1], n[ 81-1] );
elem( n[72 -1], n[ 77-1] );
elem( n[77 -1], n[ 82-1] );
elem( n[82 -1], n[ 84-1] );
elem( n[73 -1], n[ 78-1] );
elem( n[78 -1], n[ 83-1] );
elem( n[83 -1], n[ 85-1] );
elem( n[86 -1], n[ 91-1] );
elem( n[91 -1], n[ 96-1] );
elem( n[87 -1], n[ 92-1] );
elem( n[92 -1], n[ 97-1] );
elem( n[88 -1], n[ 93-1] );
elem( n[93 -1], n[ 98-1] );
elem( n[89 -1], n[ 94-1] );
elem( n[94 -1], n[ 99-1] );
elem( n[99 -1], n[101-1] );
elem( n[90 -1], n[ 95-1] );
elem( n[95 -1], n[100-1] );
elem( n[100-1], n[102-1] );
elem( n[103-1], n[107-1] );
elem( n[107-1], n[111-1] );
elem( n[104-1], n[108-1] );
elem( n[108-1], n[112-1] );
elem( n[105-1], n[109-1] );
elem( n[109-1], n[113-1] );
elem( n[106-1], n[110-1] );
elem( n[110-1], n[114-1] );
